{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\study-buddies\\\\study-buddies\\\\client\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat(_ref) {\n  _s();\n\n  let {\n    socket,\n    username,\n    room,\n    props\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const [roomId, setRoomId] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n    });\n  }, [socket]);\n  useEffect(() => {\n    async function getOldChats() {\n      const newRoom = {\n        room: room\n      };\n      const body = newRoom;\n\n      try {\n        let res = await fetch('http://localhost:5000/posts/getRoomInfo', {\n          method: 'POST',\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Credentials\": true,\n            \"mode\": \"cors\",\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        });\n        let data = await res.json();\n        console.log(data.oldmessages);\n        data.oldmessages.forEach(message => setMessageList(list => [...list, message]));\n      } catch (error) {\n        console.log({\n          error: error.message\n        });\n      }\n    }\n\n    getOldChats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        className: \"message-container\",\n        children: messageList.map(messageContent => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            id: username === messageContent.author ? \"you\" : \"other\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-content\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: messageContent.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-meta\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"time\",\n                  children: messageContent.time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"author\",\n                  children: messageContent.author\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentMessage,\n        placeholder: \"Hey...\",\n        onChange: event => {\n          setCurrentMessage(event.target.value);\n        },\n        onKeyPress: event => {\n          event.key === \"Enter\" && sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\u25BA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"gshCGMD7Wl+rWPQX9VUG3BaOcXc=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/User/Documents/study-buddies/study-buddies/client/src/components/Chat.js"],"names":["React","useEffect","useState","ScrollToBottom","Chat","socket","username","room","props","currentMessage","setCurrentMessage","messageList","setMessageList","roomId","setRoomId","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","on","data","getOldChats","newRoom","body","res","fetch","method","headers","JSON","stringify","json","console","log","oldmessages","forEach","error","map","messageContent","event","target","value","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport './Chat.css'\r\nfunction Chat({ socket, username, room , props}) {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n  const [roomId, setRoomId] = useState(\"\")\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        room: room,\r\n        author: username,\r\n        message: currentMessage,\r\n        time:\r\n          new Date(Date.now()).getHours() +\r\n          \":\" +\r\n          new Date(Date.now()).getMinutes()\r\n      };\r\n\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setMessageList((list) => [...list, data]);\r\n    });\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    async function getOldChats()\r\n    {\r\n        const newRoom = {\r\n          room: room\r\n        }\r\n        const body = newRoom;\r\n        try{\r\n            let res = await fetch('http://localhost:5000/posts/getRoomInfo', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\" : \"*\", \r\n                \"Access-Control-Allow-Credentials\" : true,\r\n                \"mode\": \"cors\",\r\n                \"Content-type\": \"application/json\"\r\n                },\r\n                body:JSON.stringify(body)\r\n            });\r\n            let data = await res.json();\r\n            console.log(data.oldmessages)\r\n            data.oldmessages.forEach((message) => setMessageList((list) => [...list, message]));\r\n        }catch(error){\r\n            console.log({error: error.message})\r\n        }\r\n    }\r\n    getOldChats();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-header\">\r\n        <p>Live Chat</p>\r\n      </div>\r\n      <div className=\"chat-body\">\r\n        <ScrollToBottom className=\"message-container\">\r\n          {messageList.map((messageContent) => {\r\n            return (\r\n              <div\r\n                className=\"message\"\r\n                id={username === messageContent.author ? \"you\" : \"other\"}\r\n              >\r\n                <div>\r\n                  <div className=\"message-content\">\r\n                    <p>{messageContent.message}</p>\r\n                  </div>\r\n                  <div className=\"message-meta\">\r\n                    <p id=\"time\">{messageContent.time}</p>\r\n                    <p id=\"author\">{messageContent.author}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </ScrollToBottom>\r\n      </div>\r\n      <div className=\"chat-footer\">\r\n        <input\r\n          type=\"text\"\r\n          value={currentMessage}\r\n          placeholder=\"Hey...\"\r\n          onChange={(event) => {\r\n            setCurrentMessage(event.target.value);\r\n          }}\r\n          onKeyPress={(event) => {\r\n            event.key === \"Enter\" && sendMessage();\r\n          }}\r\n        />\r\n        <button onClick={sendMessage}>&#9658;</button>\r\n      </div>\r\n    </div>)\r\n  \r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}